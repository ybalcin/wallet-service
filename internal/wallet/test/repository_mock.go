// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package wallet is a generated GoMock package.
package wallet

import (
	context "context"
	reflect "reflect"

	wallet "github.com/ybalcin/wallet-service/internal/wallet"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// FindTransactionsByWalletID mocks base method.
func (m *MockRepository) FindTransactionsByWalletID(ctx context.Context, walletID string) ([]wallet.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTransactionsByWalletID", ctx, walletID)
	ret0, _ := ret[0].([]wallet.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTransactionsByWalletID indicates an expected call of FindTransactionsByWalletID.
func (mr *MockRepositoryMockRecorder) FindTransactionsByWalletID(ctx, walletID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTransactionsByWalletID", reflect.TypeOf((*MockRepository)(nil).FindTransactionsByWalletID), ctx, walletID)
}

// FindWalletByID mocks base method.
func (m *MockRepository) FindWalletByID(ctx context.Context, id string) (*wallet.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindWalletByID", ctx, id)
	ret0, _ := ret[0].(*wallet.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindWalletByID indicates an expected call of FindWalletByID.
func (mr *MockRepositoryMockRecorder) FindWalletByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindWalletByID", reflect.TypeOf((*MockRepository)(nil).FindWalletByID), ctx, id)
}

// InsertTransactions mocks base method.
func (m *MockRepository) InsertTransactions(ctx context.Context, transactions ...wallet.Transaction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range transactions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertTransactions", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTransactions indicates an expected call of InsertTransactions.
func (mr *MockRepositoryMockRecorder) InsertTransactions(ctx interface{}, transactions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, transactions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransactions", reflect.TypeOf((*MockRepository)(nil).InsertTransactions), varargs...)
}

// InsertWallet mocks base method.
func (m *MockRepository) InsertWallet(ctx context.Context, w *wallet.Wallet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertWallet", ctx, w)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertWallet indicates an expected call of InsertWallet.
func (mr *MockRepositoryMockRecorder) InsertWallet(ctx, w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertWallet", reflect.TypeOf((*MockRepository)(nil).InsertWallet), ctx, w)
}
